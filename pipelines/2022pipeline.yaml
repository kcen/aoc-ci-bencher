resources:
  - name: mattcl
    type: git
    icon: github
    source:
      uri: https://github.com/mattcl/aoc2022.git
      ignore_paths:
        - 'README.md'
        - 'template/*'

  - name: lanjian
    type: git
    icon: github
    source:
      uri: https://github.com/LanJian/aoc-2022.git

  - name: aspidites
    type: git
    icon: github
    source:
      uri: https://github.com/aspidites/aoc2022.git

  - name: pting
    type: git
    icon: github
    source:
      uri: https://github.com/pting/aoc2022.git

  - name: kcen
    type: git
    icon: github
    source:
      uri: https://github.com/kcen/AdventOfCode.git

  - name: ci
    type: git
    icon: github
    source:
      uri: https://github.com/mattcl/aoc-ci-bencher.git

  - name: aoc-inputs
    type: git
    icon: github
    source:
      uri: https://github.com/mattcl/aoc-aggregated-inputs.git
      branch: master
      ignore_paths:
        - '**/README.md'
        - '**/application-benches.md'
        - '**/solutions.md'
        - '**/solutions.json'

  # this is the same repository as the aoc-inputs resource, but this one allows
  # writes (this is done to avoid new concourse version detection for ignored
  # paths) see https://github.com/concourse/git-resource
  - name: aoc-inputs-write
    type: git
    icon: github
    source:
      uri: git@github.com:mattcl/aoc-aggregated-inputs.git
      branch: master
      private_key: ((aoc-inputs.deploy_key))

jobs:
  - name: collect-inputs
    public: true
    serial_groups: [benching]
    build_log_retention:
      builds: 50
    plan:
      - in_parallel:
        - get: ci
          trigger: false
        - get: aoc-inputs
          trigger: false
        - get: mattcl
          trigger: true
        - get: lanjian
          trigger: true
        - get: aspidites
          trigger: true
        - get: pting
          trigger: true
        - get: kcen
          trigger: true
        - get: aoc-inputs-write
          trigger: false
      - task: collect
        file: ci/tasks/collect-inputs.yml
      - put: aoc-inputs-write
        params:
          repository: modified-aoc-inputs
          rebase: true

  - name: solve-inputs
    public: true
    serial_groups: [benching]
    build_log_retention:
      builds: 50
    plan:
      - in_parallel:
        - get: ci
          trigger: false
        - get: aoc-inputs
          trigger: true
        - get: aoc-inputs-write
          trigger: false
        - get: mattcl
          trigger: false
          passed:
            - collect-inputs

      - task: build-solver
        file: ci/tasks/build-solver.yml
        input_mapping:
          repo: mattcl
      - task: solve
        file: ci/tasks/solve-inputs.yml
      - put: aoc-inputs-write
        params:
          repository: modified-aoc-inputs
          rebase: true

  - name: mattcl
    public: true
    build_log_retention:
      builds: 50
    plan:
      - in_parallel:
        - get: ci
          trigger: false
        - get: mattcl
          trigger: true
          passed:
            - collect-inputs
      - task: test-and-bench
        file: mattcl/ci/tasks/test-and-bench.yaml
        input_mapping:
          repo: mattcl

  - name: lanjian
    public: true
    build_log_retention:
      builds: 50
    plan:
      - in_parallel:
        - get: ci
          trigger: false
        - get: lanjian
          trigger: true
          passed:
            - collect-inputs
      - task: test-and-bench
        file: ci/tasks/generic-rust.yml
        input_mapping:
          repo: lanjian

  - name: lanjian-check-inputs
    public: true
    build_log_retention:
      builds: 50
    plan:
      - in_parallel:
        - get: ci
          trigger: false
        - get: lanjian
          trigger: true
          passed:
            - lanjian
        - get: aoc-inputs
          trigger: true
          passed:
            - solve-inputs
      - task: extract-lanjian-rust-examples
        file: ci/tasks/extract-examples.yml
        vars:
          archive-name: aoc-2022-lanjian.tar.gz
        input_mapping:
          repo: lanjian
        output_mapping:
          examples: lanjian-examples
      - task: check-inputs
        file: ci/tasks/generic-check-python.yml
        vars:
          script: ci/scripts/lj-check-rust
        input_mapping:
          repo: lanjian-examples

  - name: pting
    public: true
    build_log_retention:
      builds: 50
    plan:
      - in_parallel:
        - get: ci
          trigger: false
        - get: pting
          trigger: true
          passed:
            - collect-inputs
      - task: test-and-bench
        file: ci/tasks/generic-python.yml
        vars:
          script: repo/run.sh
        input_mapping:
          repo: pting
        tags:
          - bencher

  - name: pting-check-inputs
    public: true
    build_log_retention:
      builds: 50
    plan:
      - in_parallel:
        - get: ci
          trigger: false
        - get: pting
          trigger: true
          passed:
            - pting
        - get: aoc-inputs
          trigger: true
          passed:
            - solve-inputs
      - task: check-inputs
        file: ci/tasks/generic-check-python.yml
        vars:
          script: ci/scripts/pt-check-python
        input_mapping:
          repo: pting
        tags:
          - bencher

  - name: kcen
    public: true
    build_log_retention:
      builds: 50
    plan:
      - in_parallel:
        - get: ci
          trigger: false
        - get: kcen
          trigger: true
          passed:
            - collect-inputs
      - task: test-and-bench
        file: ci/tasks/generic-ruby.yml
        input_mapping:
          repo: kcen

  - name: kcen-check-inputs
    public: true
    build_log_retention:
      builds: 50
    plan:
      - in_parallel:
        - get: ci
          trigger: false
        - get: kcen
          trigger: true
          passed:
            - kcen
        - get: aoc-inputs
          trigger: true
          passed:
            - solve-inputs
      - task: check-inputs
        file: ci/tasks/generic-check-ruby.yml
        vars:
          script: ci/scripts/kc-check-ruby
        input_mapping:
          repo: kcen

  - name: aspidites
    public: true
    build_log_retention:
      builds: 50
    plan:
      - in_parallel:
        - get: ci
          trigger: false
        - get: aspidites
          trigger: true
          passed:
            - collect-inputs
      - task: test-and-bench
        file: ci/tasks/generic-haskell.yml
        vars:
          script: repo/ci/run.sh
        input_mapping:
          repo: aspidites

  - name: aspidites-check-inputs
    public: true
    build_log_retention:
      builds: 50
    plan:
      - in_parallel:
        - get: ci
          trigger: false
        - get: aspidites
          trigger: true
          passed:
            - aspidites
        - get: aoc-inputs
          trigger: true
          passed:
            - solve-inputs
      - task: check-inputs
        file: ci/tasks/generic-check-haskell.yml
        vars:
          script: ci/scripts/asp-check-haskell
        input_mapping:
          repo: aspidites

  - name: comparative-bench
    public: true
    serial_groups: [benching]
    build_log_retention:
      builds: 50
    plan:
      - in_parallel:
        - get: ci
          trigger: false
        - get: aoc-inputs
          trigger: true
          passed:
            - solve-inputs
        - get: aoc-inputs-write
          trigger: false
        - get: mattcl
          trigger: true
          passed:
            - mattcl
        - get: lanjian
          trigger: true
          passed:
            - lanjian-check-inputs
        - get: pting
          trigger: true
          passed:
            - pting-check-inputs
        - get: kcen
          trigger: true
          passed:
            - kcen-check-inputs
        - get: aspidites
          trigger: true
          passed:
            - aspidites-check-inputs

      # So yeah. This isn't ideal, but because I don't want to deal with setting
      # up proper artifact storage, let's just rebuild these things here
      - in_parallel:
        - task: build-mattcl-solver
          file: ci/tasks/build-solver.yml
          input_mapping:
            repo: mattcl
          output_mapping:
            solver: mattcl-solver

        - task: extract-lanjian-rust-examples2
          file: ci/tasks/extract-examples.yml
          vars:
            archive-name: aoc-2022-lanjian.tar.gz
          input_mapping:
            repo: lanjian
          output_mapping:
            examples: lanjian-examples

        - task: build-aspidites-solver
          file: ci/tasks/build-aspidites-solver.yml
          input_mapping:
            repo: aspidites
          output_mapping:
            solver: aspidites-solver

      - task: comparative-benches
        file: ci/tasks/application-benchmarks.yml
        tags:
          - bencher
      - put: aoc-inputs-write
        params:
          repository: modified-aoc-inputs
          rebase: true
