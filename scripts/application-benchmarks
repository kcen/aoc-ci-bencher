#!/bin/bash
set -e

CUR=$(pwd)
HYPERFINE="${CUR}/ci/tools/hyperfine/hyperfine"
INPUTS="${CUR}/aoc-inputs/2022"

# make the working repo
git clone aoc-inputs modified-aoc-inputs

echo "ensuring mattcl solver is executable"
chmod +x mattcl-solver/aoc

echo "unpacking lanjian examples"
tar -xvf lanjian-examples/aoc-2022-lanjian.tar.gz
mv aoc-2022-lanjian lanjian

# inputs look like
# aoc-inputs/year/day/files
i=1
while [ $i -ne 26 ]
do
  echo ""
  echo "--- Preparing environment for day ${i} ---"

  padded=`printf %03d $i`
  input_dir="${INPUTS}/day_${padded}"

  if [ ! -d "${input_dir}" ]; then
    echo "no inputs for day ${i}, breaking"
    break
  fi

  input_list=$(find "${input_dir}" -name "input-*" -exec basename {} \; | xargs | sed 's/ /,/g')
  echo "detected the following inputs for day ${i}: ${input_list}"

  var_prefix="AOC_INPUT=${input_dir}"

  mkdir -p reports
  output="reports/bench-${padded}.md"
  large_output="reports/bench-large-${padded}.md"

  # get the list of "executables"
  short_padded=`printf %02d $i`
  lanjian_candidate=$(find lanjian -name "day_${short_padded}")

  # normal benchmarks
  export INPUT_DIR=$input_dir
  cmd=(
    $HYPERFINE
    -w 3
    -L fname $input_list
    --export-markdown "$output"
  )
  if solver/aoc run $1 foo 2>&1 | grep -q 'Unknown'; then
    echo "No solution for mattcl day ${1}"
  else
    cmd+=("mattcl/aoc run ${i} {fname}")
  fi

  if [ ! -z $lanjian_candidate ]; then
    cmd+=("ci/scripts/run-example ${lanjian_candidate} {fname}")
  fi

  echo "Benching day ${i}"
  "${cmd[@]}"

  echo "Cleaning output file"
  sed -i 's/ci\/scripts\/run.*-example //g' $output

  echo "Sorting output file"
  sorted="day_${padded}_sorted_output.md"
  (head -n 2 "${output}" && tail -n +3 "${output}" | sort --field-separator=\| --key=2) > $sorted

  aggregate_output="day_${padded}_application-benches.md"
  cat > $aggregate_output <<-EOF
# Day ${i} benchmarks

[link to problem](http://adventofcode.com/2022/day/${i})

The following benchmarks are auto-generated via [hyperfine](https://github.com/sharkdp/hyperfine) by a ci system running on shared hardware. Results may be inaccurate, particularly for execution times < 5ms, as per the hyperfine warnings.

The "official" inputs were aggregated from repositories participating in the generation of these benchmarks. The "large" inputs (if any) were sourced from various places, including the subreddit.

## Benchmarks with officially generated inputs
EOF
  cat $sorted >> $aggregate_output

  # un-tar any compressed files, if necessary
  find "${input_dir}" -type f -name "*.tar.gz" -exec tar -xvf {} -C "${input_dir}" \; || true

  # large benchmarks
  large_input_list=$(find "${input_dir}" -type f -regextype sed -regex ".*/large-input-[^.]*" -exec basename {} \; | xargs | sed 's/ /,/g')
  if [ ! -z $large_input_list ]; then
    echo "detected the following large inputs for day ${i}: ${large_input_list}"

    # for large benchmarks, we have to ignore failure
    cmd=(
      $HYPERFINE
      -w 3
      -L fname $large_input_list
      --ignore-failure
      --export-markdown "$large_output"
    )
    if solver/aoc run $1 foo 2>&1 | grep -q 'Unknown'; then
      echo "No solution for mattcl day ${1}"
    else
      cmd+=("mattcl/aoc run ${i} {fname}")
    fi

    if [ ! -z $lanjian_candidate ]; then
      cmd+=("ci/scripts/run-example ${lanjian_candidate} {fname}")
    fi

    echo "Benching day ${i} with large inputs"
    "${cmd[@]}"

    echo "Cleaning output file"
    sed -i 's/ci\/scripts\/run.*-example //g' $large_output

    echo "Sorting output file"
    sorted="day_${padded}_sorted_large_output.md"
    (head -n 2 "${large_output}" && tail -n +3 "${large_output}" | sort --field-separator=\| --key=2) > $sorted

    echo "## Benchmarks using unofficial large inputs" >> $aggregate_output
    cat $sorted >> $aggregate_output
  fi

  cp $aggregate_output "modified-aoc-inputs/2022/day_${padded}/application-benches.md"

  i=`expr $i + 1`
done

# stupidly commit the latest report, because who needs an easy to view history?
cd modified-aoc-inputs
git config --global user.name "papercode ci"
git config --global user.email "matt@questionable.engineering"
git add .
if [ -z "$(git status --porcelain)" ]; then
  echo "Working directory clean"
else
  git commit -a -m "automated: update benchmark reports"
fi
