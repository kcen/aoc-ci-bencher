#!/bin/bash
set -e

CUR=$(pwd)
HYPERFINE="${CUR}/ci/tools/hyperfine/hyperfine"
INPUTS="${CUR}/aoc-inputs/2022"

# make the working repo
git clone aoc-inputs-write modified-aoc-inputs

echo "ensuring mattcl solver is executable"
chmod +x mattcl-solver/aoc

echo "unpacking lanjian examples"
tar -xvf lanjian-examples/aoc-2022-lanjian.tar.gz
mv aoc-2022-lanjian lanjian

echo "ensuring aspidites solver is executable"
chmod +x aspidites-solver/aoc

# TODO: handle python/ruby deps installs

# inputs look like
# aoc-inputs/year/day/files
i=1
while [ $i -ne 26 ]
do
  echo ""
  echo "--- Preparing environment for day ${i} ---"

  echo "12121" > "testfilename"

  padded=`printf %03d $i`
  input_dir="${INPUTS}/day_${padded}"

  if [ ! -d "${input_dir}" ]; then
    echo "no inputs for day ${i}, breaking"
    break
  fi

  input_list=$(find "${input_dir}" -name "input-*" -exec basename {} \; | xargs | sed 's/ /,/g')
  echo "detected the following inputs for day ${i}: ${input_list}"

  var_prefix="AOC_INPUT=${input_dir}"

  mkdir -p reports
  output="reports/bench-${padded}.md"
  large_output="reports/bench-large-${padded}.md"

  # get the list of "executables"
  short_padded=`printf %02d $i`
  lanjian_candidate=$(find lanjian -name "day_${short_padded}")
  pting_candidate=$(find pting -name "day${short_padded}.py")
  kcen_candidate=$(find "kcen/2022" -name "${short_padded}")

  echo "" > participants

  # normal benchmarks
  export INPUT_DIR=$input_dir
  cmd=(
    $HYPERFINE
    -w 3
    -L fname $input_list
    --export-markdown "$output"
  )
  if mattcl-solver/aoc run $i foo 2>&1 | grep -q 'Unknown'; then
    echo "No solution for mattcl day ${i}"
  else
    cmd+=("mattcl-solver/aoc run ${i} ${input_dir}/{fname}")
    echo "- [mattcl](https://github.com/mattcl/aoc2022)" >> participants
  fi

  if [ ! -z $lanjian_candidate ]; then
    cmd+=("${var_prefix}/{fname} ${lanjian_candidate}")
    echo "- [lanjian](https://github.com/LanJian/aoc-2022)" >> participants
  fi

  if [ ! -z $pting_candidate ]; then
    cmd+=("${var_prefix}/{fname} python ${pting_candidate}")
    echo "- [pting](https://github.com/pting/aoc2022)" >> participants
  fi

  if [ ! -z $kcen_candidate ]; then
    cmd+=("${kcen_candidate}/solve ${input_dir}/{fname}")
    echo "- [kcen](https://github.com/kcen/AdventOfCode)" >> participants
  fi

  if aspidites-solver/aoc -i testfilename -d $i 2>&1 | grep -q 'do not exist'; then
    echo "No solution for aspidites day ${i}"
  else
    cmd+=("aspidites-solver/aoc -i ${input_dir}/{fname} -d ${i}")
    echo "- [aspidites](https://github.com/aspidites/aoc2022)" >> participants
  fi

  echo "Benching day ${i}"
  "${cmd[@]}"

  echo "Cleaning output file"
  sed -i 's/ci\/scripts\/run.*-example //g' $output
  sed -i "s#${var_prefix}/##g" $output
  sed -i "s#${input_dir}/##g" $output
  # ugh
  sed -i 's/`\(input-[a-z0-9]*\) \(.*\)`/`\2 \1`/' $output

  echo "Sorting output file"
  sorted="day_${padded}_sorted_output.md"
  (head -n 2 "${output}" && tail -n +3 "${output}" | sort --field-separator=\| --key=2) > $sorted

  sorted_repos=$(cat participants | sort -k 2)

  aggregate_output="day_${padded}_application-benches.md"
  cat > $aggregate_output <<-EOF
# Day ${i} benchmarks

[link to problem](http://adventofcode.com/2022/day/${i})

The following benchmarks are auto-generated via [hyperfine](https://github.com/sharkdp/hyperfine) by a ci system running on shared hardware. Results may be inaccurate, particularly for execution times < 5ms, as per the hyperfine warnings.

[ci pipeline](http://ci.papercode.net:8080/teams/aoc2022/pipelines/aoc-compare-2022)

The "official" inputs were aggregated from repositories participating in the generation of these benchmarks. The "large" inputs (if any) were sourced from various places, including the subreddit.

## Repos (with solutions for day ${i})

${sorted_repos}

## Benchmarks with officially generated inputs
EOF
  cat $sorted >> $aggregate_output

  # un-tar any compressed files, if necessary
  find "${input_dir}" -type f -name "*.tar.gz" -exec tar -xvf {} -C "${input_dir}" \; || true

  # large benchmarks
  large_input_list=$(find "${input_dir}" -type f -regextype sed -regex ".*/large-input-[^.]*" -exec basename {} \; | xargs | sed 's/ /,/g')
  if [ ! -z $large_input_list ]; then
    echo "detected the following large inputs for day ${i}: ${large_input_list}"

    # for large benchmarks, we have to ignore failure
    cmd=(
      $HYPERFINE
      -w 3
      -L fname $large_input_list
      --ignore-failure
      --export-markdown "$large_output"
    )
    if mattcl-solver/aoc run $i foo 2>&1 | grep -q 'Unknown'; then
      echo "No solution for mattcl day ${i}"
    else
      cmd+=("mattcl-solver/aoc run ${i} {fname}")
    fi

    if [ ! -z $lanjian_candidate ]; then
      cmd+=("${var_prefix}/{fnmae} ${lanjian_candidate}")
    fi

    if [ ! -z $pting_candidate ]; then
      cmd+=("${var_prefix}/{fname} python ${pting_candidate}")
    fi

    if [ ! -z $kcen_candidate ]; then
      cmd+=("${kcen_candidate}/solve ${input_dir}/{fname}")
    fi

    if aspidites-solver/aoc -i testfilename -d $i 2>&1 | grep -q 'do not exist'; then
      echo "No solution for aspidites day ${i}"
    else
      cmd+=("aspidites-solver/aoc -i ${input_dir}/{fname} -d ${i}")
    fi

    echo "Benching day ${i} with large inputs"
    "${cmd[@]}"

    echo "Cleaning output file"
    sed -i 's/ci\/scripts\/run.*-example //g' $large_output
    sed -i "s#${var_prefix}/##g" $output
    sed -i "s#${input_dir}/##g" $output
    # ugh
    sed -i 's/`\(input-[a-z0-9]*\) \(.*\)`/`\2 \1`/' $output

    echo "Sorting output file"
    sorted="day_${padded}_sorted_large_output.md"
    (head -n 2 "${large_output}" && tail -n +3 "${large_output}" | sort --field-separator=\| --key=2) > $sorted

    echo "## Benchmarks using unofficial large inputs" >> $aggregate_output
    cat $sorted >> $aggregate_output
  fi

  cp $aggregate_output "modified-aoc-inputs/2022/day_${padded}/application-benches.md"

  i=`expr $i + 1`
done

# stupidly commit the latest report, because who needs an easy to view history?
cd modified-aoc-inputs
git config --global user.name "papercode ci"
git config --global user.email "matt@questionable.engineering"
git add .
if [ -z "$(git status --porcelain)" ]; then
  echo "Working directory clean"
else
  git commit -a -m "automated: update benchmark reports"
fi
