#!/bin/bash
set -e

CUR=$(pwd)
INPUTS="${CUR}/aoc-inputs/2022"
OUTPUTS="${CUR}/modified-aoc-inputs/2022"

git config --global user.name "papercode ci"
git config --global user.email "matt@questionable.engineering"

# make the working repo
git clone aoc-inputs-write modified-aoc-inputs

echo "ensuring solver is executable"
chmod +x solver/aoc

i=1
while [ $i -ne 26 ]
do
    padded=`printf %03d $i`
    input_dir="${INPUTS}/day_${padded}"
    export INPUT_DIR=$input_dir

    output_dir="${OUTPUTS}/day_${padded}"

    if [ ! -d "${input_dir}" ]; then
        echo "no inputs for day ${i}, breaking"
        break
    fi

    if solver/aoc run $i foo 2>&1 | grep -q 'Unknown'; then
        echo "no solver for day ${i}, breaking"
        break
    fi

    echo "solving day ${i}"

    json="day_${padded}.json"
    export OUTPUT_FILE=$json

    echo "{}" > $json

    mapping="day_${padded}_mapping.md"

    cat > $mapping <<-EOF
# input -> solutions mapping
|input|part 1|part 2|
|:---|:---|:---|
EOF
    find "${input_dir}" -type f -name "*.tar.gz" -exec tar -xvf {} -C "${input_dir}" \; || true

    input_files=$(find "${input_dir}" -type f -regextype sed -regex ".*/.*input-[^.]*" -exec basename {} \; | sort)

    for fname in $input_files
    do
        export INPUT_NAME="${fname}"
        echo "using input ${fname}"
        out=$(solver/aoc run $i "${input_dir}/${fname}" -j | python ci/scripts/format_example_output.py)
        echo "|${fname}|${out}|" >> $mapping
        out=$(solver/aoc run $i "${input_dir}/${fname}" -j | python ci/scripts/append_json_solution.py)
    done
    cp $mapping "${output_dir}/solutions.md"
    cp $json "${output_dir}/solutions.json"

    i=`expr $i + 1`
done

cd modified-aoc-inputs

git add .

if [ -z "$(git status --porcelain)" ]; then
    echo "Working directory clean"
else
    git commit -a -m "automated: update input-solution mappings"
fi
